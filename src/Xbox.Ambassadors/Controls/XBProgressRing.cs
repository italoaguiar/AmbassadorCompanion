//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.UI.Xaml.Controls;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;
using Windows.UI.Xaml;



namespace Xbox.Ambassadors.Controls
{
    public sealed class XAProgressRing : IAnimatedVisualSource
    {
        public IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            if (!IsRuntimeCompatible())
            {
                return null;
            }
            return new AnimatedVisual(compositor);
        }

        static bool IsRuntimeCompatible()
        {
            if (!Windows.Foundation.Metadata.ApiInformation.IsTypePresent("Windows.UI.Composition.CompositionGeometricClip"))
            {
                return false;
            }
            return true;
        }

        sealed class AnimatedVisual : IAnimatedVisual
        {
            const long c_durationTicks = 11880000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            StepEasingFunction _holdThenStepEasingFunction;
            ContainerVisual _root;
            ExpressionAnimation _scalarExpressionAnimation;
            StepEasingFunction _stepThenHoldEasingFunction;

            // Caminho da elipse 1
            CompositionColorBrush ColorBrush_AlmostDarkGreen_FF0C390C()
            {

                return _c.CreateColorBrush((Color)Application.Current.Resources["SystemAccentColor"]);
            }

            // Caminho da elipse 1
            CompositionColorBrush ColorBrush_AlmostDarkGreen_FF146614()
            {
                return _c.CreateColorBrush((Color)Application.Current.Resources["SystemAccentColorDark1"]);
            }

            // Caminho da elipse 1
            CompositionColorBrush ColorBrush_White()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF));
            }

            // TStart
            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0), new Vector2(0.666999996F, 1));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.333000004F, 0), new Vector2(0.833000004F, 0.833000004F));
            }

            // Caminho da elipse 1.EllipseGeometry
            CompositionEllipseGeometry Ellipse_54p75_0()
            {
                var result = _c.CreateEllipseGeometry();
                var propertySet = result.Properties;
                propertySet.InsertScalar("TStart", 0);
                propertySet.InsertScalar("TEnd", 0);
                result.Radius = new Vector2(54.75F, 54.75F);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("TrimEnd", _reusableExpressionAnimation);
                result.StartAnimation("TStart", TStartScalarAnimation_0_to_1_0());
                var controller = result.TryGetAnimationController("TStart");
                controller.Pause();
                controller.StartAnimation("Progress", ScalarExpressionAnimation());
                result.StartAnimation("TEnd", TEndScalarAnimation_0_to_1_0());
                controller = result.TryGetAnimationController("TEnd");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Caminho da elipse 1.EllipseGeometry
            CompositionEllipseGeometry Ellipse_54p75_1()
            {
                var result = _c.CreateEllipseGeometry();
                var propertySet = result.Properties;
                propertySet.InsertScalar("TStart", 0);
                propertySet.InsertScalar("TEnd", 0);
                result.Radius = new Vector2(54.75F, 54.75F);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("TrimEnd", _reusableExpressionAnimation);
                result.StartAnimation("TStart", TStartScalarAnimation_0_to_1_1());
                var controller = result.TryGetAnimationController("TStart");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                result.StartAnimation("TEnd", TEndScalarAnimation_0_to_1_1());
                controller = result.TryGetAnimationController("TEnd");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Caminho da elipse 1.EllipseGeometry
            CompositionEllipseGeometry Ellipse_54p75_2()
            {
                var result = _c.CreateEllipseGeometry();
                var propertySet = result.Properties;
                propertySet.InsertScalar("TStart", 0);
                propertySet.InsertScalar("TEnd", 0);
                result.Radius = new Vector2(54.75F, 54.75F);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("TrimEnd", _reusableExpressionAnimation);
                result.StartAnimation("TStart", TStartScalarAnimation_0_to_1_2());
                var controller = result.TryGetAnimationController("TStart");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                result.StartAnimation("TEnd", TEndScalarAnimation_0_to_1_2());
                controller = result.TryGetAnimationController("TEnd");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0);
                var children = result.Children;
                children.InsertAtTop(ShapeVisual());
                return result;
            }

            ExpressionAnimation ScalarExpressionAnimation()
            {
                var result = _scalarExpressionAnimation = _c.CreateExpressionAnimation();
                result.SetReferenceParameter("_", _root);
                result.Expression = "_.Progress";
                return result;
            }

            ShapeVisual ShapeVisual()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(1000, 1000);
                var shapes = result.Shapes;
                // Caminho da elipse 1
                shapes.Add(SpriteShape_0());
                // Caminho da elipse 1
                shapes.Add(SpriteShape_1());
                // Caminho da elipse 1
                shapes.Add(SpriteShape_2());
                return result;
            }

            // Caminho da elipse 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(8.40441036F, 0, 0, 8.40441036F, 496.017761F, 496.035553F);
                result.Geometry = Ellipse_54p75_0();
                result.StrokeBrush = ColorBrush_White();
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 4;
                return result;
            }

            // Caminho da elipse 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(8.40441036F, 0, 0, 8.40441036F, 496.017761F, 496.035553F);
                result.Geometry = Ellipse_54p75_1();
                result.StrokeBrush = ColorBrush_AlmostDarkGreen_FF146614();
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 5;
                return result;
            }

            // Caminho da elipse 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(8.40441036F, 0, 0, 8.40441036F, 496.017761F, 496.035553F);
                result.Geometry = Ellipse_54p75_2();
                result.StrokeBrush = ColorBrush_AlmostDarkGreen_FF0C390C();
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 5;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_0_to_1_0()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.336836964F, 1, CubicBezierEasingFunction_1());
                return result;
            }

            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_0_to_1_1()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0, StepThenHoldEasingFunction());
                result.InsertKeyFrame(0.134736836F, 0, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.5F, 1, _cubicBezierEasingFunction_1);
                return result;
            }

            // TEnd
            ScalarKeyFrameAnimation TEndScalarAnimation_0_to_1_2()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.131578952F, 0, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.5F, 1, _cubicBezierEasingFunction_1);
                return result;
            }

            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_1_0()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0, HoldThenStepEasingFunction());
                result.InsertKeyFrame(0.552631557F, 1, CubicBezierEasingFunction_0());
                return result;
            }

            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_1_1()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.447368413F, 1, _cubicBezierEasingFunction_1);
                return result;
            }

            // TStart
            ScalarKeyFrameAnimation TStartScalarAnimation_0_to_1_2()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.157894731F, 0, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.552631557F, 1, _cubicBezierEasingFunction_1);
                return result;
            }

            internal AnimatedVisual(Compositor compositor)
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            Visual IAnimatedVisual.RootVisual => _root;
            TimeSpan IAnimatedVisual.Duration => TimeSpan.FromTicks(c_durationTicks);
            Vector2 IAnimatedVisual.Size => new Vector2(1000, 1000);
            void IDisposable.Dispose() => _root?.Dispose();
        }
    }
}
